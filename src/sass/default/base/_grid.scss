@if $useBase == true and $useGrid == true {
	/*==========  $Grid - Fluid width  ==========*/
	/*!*
	*
	* Config.
	*
	* No. of Columns:          #{$colAmount};
	* Percentual column width: #{ percentage(100 / $colAmount) };
	* Gutter width:            #{ $gutterWidth };
	*
	**/

	/*==========  Global setup  ==========*/
	[class^="unit-"], [class*=" unit-"] {
		@include box-sizing(border-box);
		float: getFloat(default);
		padding-left: #{$gutterWidth/2};
		padding-right: #{$gutterWidth/2};
		width: 100%;
	}

	// Columns width
	@for $i from 1 through ($colAmount) {
		.unit-#{$i} { @include seelva-col($i); }
	}

	// Prefixes
	@for $i from 1 through ($colAmount - 1) {
		.prefix-#{$i} { @include seelva-col( (p:$i) ); }
	}

	// Suffixes
	@for $i from 1 through ($colAmount - 1) {
		.suffix-#{$i} { @include seelva-col( (s:$i) ); }
	}

	@each $device, $deviceAttrs in $devices-list {
		@if not deviceIsAlias($device) {
			// Create units for real devices, not for aliases
			/*! Units for '#{$device}' devices */
			@include mq($device) {
				@for $i from 1 through ($colAmount) {
					.unit-#{getDeviceAttr($device, abbr)}-#{$i} { @include seelva-col($i); }
				}

				// Prefixes
				@for $i from 1 through ($colAmount - 1) {
					.prefix-#{getDeviceAttr($device, abbr)}-#{$i} { @include seelva-col( (p:$i) ); }
				}

				// Suffixes
				@for $i from 1 through ($colAmount - 1) {
					.suffix-#{getDeviceAttr($device, abbr)}-#{$i} { @include seelva-col( (s:$i) ); }
				}
			}
		}
	}
}
