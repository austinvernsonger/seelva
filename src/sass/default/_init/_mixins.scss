/*==========  $Common patterns  ==========*/
// Tradition image replacement
@mixin imgreplace {
	display: inline-block;
	text-indent: -5000em;
}

// Modern image replacement technique from h5bp
// https://github.com/h5bp/html5-boilerplate/blob/081f8aa0decdc1d2d561ff6dd23abaeff4bbf439/css/main.css
@mixin ir {
	background-color: transparent;
	border: 0;
	overflow: hidden;
	/* IE 6/7 fallback */
	*text-indent: -9999px;

	&:before {
		content: "";
		display: block;
		width: 0;
		height: 150%;
	}
}

// Micro clearfix
@mixin cf {
	*zoom: 1;

	&:before, &:after { content: " "; display: table; }
	&:after { clear: both; }
}

// First element in a row
@mixin alpha {
	clear: left;
	float: left;
}

// Last element in a row
@mixin omega {
	clear: right;
	float: right;
	margin-right: 0;
}

// Hides and element but screen readers can still see it
@mixin invisible() {
	clip: rect(1px 1px 1px 1px);
	clip: rect(1px, 1px, 1px, 1px);
	position: absolute !important; /* IE6, IE7 */
}

// Visually truncate text from an elment
@mixin truncate($truncation-boundary) {
	max-width: $truncation-boundary;
	overflow: hidden;
	text-overflow: ellipsis;
	white-space: nowrap;
}

// /*==========  $Butons and forms  ==========*/
// Select all buttons
@mixin button($state: 'normal') {
	@if $state == 'normal' {
		input[type=button],
		input[type=submit],
		input[type=reset],
		input[type=color],
		button,
		button[type],
		.btn, .btn:link, .btn:visited,
		.button, .button:link, .button {
			@content;
		}
	}
	@else if $state == 'focus' {
		input[type=button]:focus,
		input[type=submit]:focus,
		input[type=reset]:focus,
		input[type=color]:focus,
		button:focus,
		button[type]:focus,
		.btn:focus,
		.button:focus {
			@content;
		}
	}
	@else if $state == 'hover' {
		input[type=button]:hover,
		input[type=submit]:hover,
		input[type=reset]:hover,
		input[type=color]:hover,
		button:hover,
		button[type]:hover,
		.btn:hover,
		.button:hover {
			@content;
		}
	}
	@else if $state == 'active' {
		input[type=button]:active,
		input[type=submit]:active,
		input[type=reset]:active,
		input[type=color]:active,
		button:active,
		button[type]:active,
		.btn:active,
		.button:active {
			@content;
		}
	}
	@else if $state == 'disabled' {
		input[type=button][disabled],
		input[type=submit][disabled],
		input[type=reset][disabled],
		input[type=color][disabled],
		button[disabled],
		button[type][disabled],
		.btn.disabled,
		.button.disabled {
			&,
			&:hover,
			&:active {
				@content;
			}
		}
	}
}

// Select all text-based inputs
@mixin form-text() {
	input:not([type]),
	input[type=date],
	input[type=datetime],
	input[type=datetime-local],
	input[type=email],
	input[type=file],
	input[type=month],
	input[type=number],
	input[type=password],
	input[type=search],
	input[type=tel],
	input[type=text],
	input[type=time],
	input[type=url],
	input[type=week],
	select,
	textarea {
		@content;
	}
}

// Select all option inputs
@mixin form-options() {
	input[type=checkbox],
	input[type=radio] {
		@content;
	}
}

/*==========  $Other  ==========*/
// Create a vendor prefixer
@mixin vendor($property, $value...){
  -webkit-#{$property}:$value;
	 -moz-#{$property}:$value;
	  -ms-#{$property}:$value;
	   -o-#{$property}:$value;
		  #{$property}:$value;
}

// Creates a vertical gradient
@mixin default-gradient($start: $c-ghostwhite, $stop: $c-lightgray) {
	@include background-image(linear-gradient($start, $stop));
}

// Creates a fallback background for legacy browsers
@mixin legacy-bg($color: $c-whitesmoke, $posY: 'top') {
	background: $color url(../images/gradient-bg.png) repeat-x left $posY;
}
